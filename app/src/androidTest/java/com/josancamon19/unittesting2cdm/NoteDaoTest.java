package com.josancamon19.unittesting2cdm;

import android.database.sqlite.SQLiteConstraintException;

import androidx.arch.core.executor.testing.InstantTaskExecutorRule;

import com.josancamon19.unittesting2cdm.models.Note;
import com.josancamon19.unittesting2cdm.util.LiveDataTestUtil;
import com.josancamon19.unittesting2cdm.util.TestUtil;

import org.junit.Rule;
import org.junit.Test;

import java.util.List;

import static com.josancamon19.unittesting2cdm.util.TestUtil.TEST_NOTE_1;
import static com.josancamon19.unittesting2cdm.util.TestUtil.TEST_NOTE_2;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class NoteDaoTest extends NoteDatabaseTest {

    @Rule
    public InstantTaskExecutorRule rule = new InstantTaskExecutorRule();
    // Fix (cannot invoke observe forever on a background thread)


    @Test
    public void insertReadDelete() throws Exception {
        // Arrange
        Note note = new Note(TestUtil.TEST_NOTE_1);
        // Act
        getNoteDao().insertNote(note).blockingGet(); // wait until completed (RxJava)
        // Assert
        LiveDataTestUtil<List<Note>> liveDataTestUtil = new LiveDataTestUtil<>();
        List<Note> insertedNotes = liveDataTestUtil.getValue(getNoteDao().getNotes());

        // Assert query is not empty
        assertNotNull(insertedNotes);

        // Assert are the same note (not taking id into account)
        assertEquals(note.getContent(), insertedNotes.get(0).getContent());
        assertEquals(note.getTimestamp(), insertedNotes.get(0).getTimestamp());
        assertEquals(note.getTitle(), insertedNotes.get(0).getTitle());

        // Act note was inserted now lets get the id autogenerated
        note.setId(insertedNotes.get(0).getId());

        // Assert is the same note
        assertEquals(note, insertedNotes.get(0));

        // Act deleting note
        getNoteDao().deletetNote(note).blockingGet();

        // Assert database is empty
        insertedNotes = liveDataTestUtil.getValue(getNoteDao().getNotes());
        assertEquals(0, insertedNotes.size());

    }

    @Test
    public void insertReadUpdateReadDelete() throws Exception {
        // Arrange
        Note note = new Note(TestUtil.TEST_NOTE_1);
        // Act
        getNoteDao().insertNote(note).blockingGet(); // wait until completed (RxJava)
        LiveDataTestUtil<List<Note>> liveDataTestUtil = new LiveDataTestUtil<>();
        List<Note> insertedNotes = liveDataTestUtil.getValue(getNoteDao().getNotes());

        // Assert query is not empty
        assertNotNull(insertedNotes);

        // Assert are the same note (not taking id into account)
        assertEquals(note.getContent(), insertedNotes.get(0).getContent());
        assertEquals(note.getTimestamp(), insertedNotes.get(0).getTimestamp());
        assertEquals(note.getTitle(), insertedNotes.get(0).getTitle());


        // Act note was inserted now lets get the id autogenerated
        note.setId(insertedNotes.get(0).getId());

        // Assert is the same note
        assertEquals(note, insertedNotes.get(0));


        // Act  Update Note
        note.setTitle(TEST_NOTE_2.getTitle());
        note.setContent(TEST_NOTE_2.getContent());
        note.setTimestamp(TEST_NOTE_2.getTimestamp());
        getNoteDao().updateNote(note).blockingGet();

        // Assert read notes
        insertedNotes = liveDataTestUtil.getValue(getNoteDao().getNotes());
        assertEquals(TEST_NOTE_2.getContent(), insertedNotes.get(0).getContent());
        assertEquals(TEST_NOTE_2.getTimestamp(), insertedNotes.get(0).getTimestamp());
        assertEquals(TEST_NOTE_2.getTitle(), insertedNotes.get(0).getTitle());

        // Act get note id from dao
        note.setId(insertedNotes.get(0).getId());
        // assert notes are exactly the same
        assertEquals(note, insertedNotes.get(0));

        // Act deleting note
        getNoteDao().deletetNote(note).blockingGet();

        // Assert database is empty
        insertedNotes = liveDataTestUtil.getValue(getNoteDao().getNotes());
        assertEquals(0, insertedNotes.size());

    }


    @Test(expected = SQLiteConstraintException.class)
    public void insertNullTitle_throwSQLiteConstraintException() throws Exception {
        // Arrange
        final Note note = new Note(TEST_NOTE_1);
        // Act
        note.setTitle(null);
        // Assert
        getNoteDao().insertNote(note).blockingGet();
    }

    @Test(expected = SQLiteConstraintException.class)
    public void updateNoteNullTitle_throwSQLiteConstraintException() throws Exception {
        // Arrange
        Note note = new Note(TEST_NOTE_1);
        // Act
        getNoteDao().insertNote(note).blockingGet();
        // Assert
        LiveDataTestUtil<List<Note>> liveDataTestUtil = new LiveDataTestUtil<>();
        List<Note> insertedNotes = liveDataTestUtil.getValue(getNoteDao().getNotes());
        assertNotNull(insertedNotes);

        note = new Note(insertedNotes.get(0));
        note.setTitle(null);
        getNoteDao().updateNote(note).blockingGet();
    }
}
